import 'package:flutter/material.dart';
import 'package:movie_app/components/subtitle_container.dart';

class ExamplePage extends StatelessWidget {
  const ExamplePage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SafeArea(
        child: Scaffold(
      appBar: AppBar(),
      body: Column(
        children: [
          Expanded(
            child: Column(
              children: [
                Icon(Icons.add),
                Icon(Icons.add),
                Icon(Icons.add),
                Icon(Icons.add),
              ],
            ),
          ),
          Expanded(
            child: SingleChildScrollView(
              child: Text(
                  "In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal. In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal. In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal. In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal.In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal.In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal.In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal.In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal.In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal.In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal.In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal.In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal.In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal.In this example, the Container widget with the long text is wrapped with a SingleChildScrollView. This allows the text to be scrollable vertically if it exceeds the available height. The TextOverflow.clip property ensures that the overflowing text is clipped rather than being ellipsized or faded.You can adjust the properties of the SingleChildScrollView according to your specific needs. For instance, you can provide additional scrolling functionality like horizontal scrolling by setting scrollDirection to Axis.horizontal."),
            ),
          ),
        ],
      ),
    ));
  }
}
